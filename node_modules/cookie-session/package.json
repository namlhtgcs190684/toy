{
  "_args": [
    [
      {
        "raw": "cookie-session@^1.4.0",
        "scope": null,
        "escapedName": "cookie-session",
        "name": "cookie-session",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "C:\\shop"
    ]
  ],
  "_from": "cookie-session@^1.4.0",
  "_hasShrinkwrap": false,
  "_id": "cookie-session@1.4.0",
  "_location": "/cookie-session",
  "_nodeVersion": "12.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cookie-session_1.4.0_1578341094702_0.4079883816757077"
  },
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "_npmVersion": "6.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cookie-session@^1.4.0",
    "scope": null,
    "escapedName": "cookie-session",
    "name": "cookie-session",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cookie-session/-/cookie-session-1.4.0.tgz",
  "_shasum": "c325aea685ceb9c8e4fd00b0313a46d547747380",
  "_shrinkwrap": null,
  "_spec": "cookie-session@^1.4.0",
  "_where": "C:\\shop",
  "bugs": {
    "url": "https://github.com/expressjs/cookie-session/issues"
  },
  "dependencies": {
    "cookies": "0.8.0",
    "debug": "2.6.9",
    "on-headers": "~1.0.2"
  },
  "description": "cookie session middleware",
  "devDependencies": {
    "connect": "3",
    "istanbul": "0.4.5",
    "mocha": "2.5.3",
    "supertest": "1.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0hhwD+BUIwMXQraiZP/J7VP2YFzqo6g4WqZlWHtEHQ22t0MeZZrNBSCxC1zcaLAs8ApT3BzAKizx9gW/AP9vNA==",
    "shasum": "c325aea685ceb9c8e4fd00b0313a46d547747380",
    "tarball": "https://registry.npmjs.org/cookie-session/-/cookie-session-1.4.0.tgz",
    "fileCount": 5,
    "unpackedSize": 14585,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeE5LnCRA9TVsSAnZWagAAQWEQAINYnmhT70Y0sDesMf2t\nDnFX6CBXtXZD1JM70XDTUws9Rq+1z0XoFW0+cV22gP/8h4tDkzH3nn2nkaTT\nTvltoRJrGDGfAGmzVe3TeNYVA0Tzas1KtomXPl3PBxSDzn8w9+xQ4Pjfw0NM\ndIdk2u/C8OzkxzQm9JlCUqXl8qJ5klCYbAOPh6OQix9rOk+25e0EPdFHJDIZ\nrhll0HNb9jeWcFvrjPhBarswtaVaeXUW6rEN5+f5S/9o9XRXB/KGt+vlSUhi\nHJB93M3GH8CIhXgHG9qW+bpnxblTb1Q4+i3fl0ghA6WzKF1gG3kpAOBk0d0h\nEGpdAB/Q/6DbBGOKbMZK9f+Ob8AMc9hqtus9voJs8szuUSxvch1XqAGfoxYY\nsvoO75t9mSts0uRJ1ri8R77YBQRSrdFWhfUaPvEYzuaH2k0YEatrJNgCUGkB\nrkelmzZkK/ZDMhvzcKh6Z76NVs7cV46CNSe9kJc7a/IeZ80PPBifmjoSQVVR\n12OUPSDAsV9mb3DnJj0UH3lTrIp0xiLTpN5qqZTo6I5gJSh59mtgWbqM+0yy\nVEvJFR6YWf/q0zzOB6oTvVNS05uNHPTTPbhuwPlvV/LMmh9FvxNbRl29+CkJ\nm3Xz9gYQovtwOR6N1Utm6Xq+GHnOM1lXMypaBo4ajVgw5QjsxkX6v3Hy4Hzd\nEio0\r\n=3Fjt\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "38f8e6dd2377c93af28b9faa614e59abbd2a0353",
  "homepage": "https://github.com/expressjs/cookie-session#readme",
  "keywords": [
    "connect",
    "express",
    "middleware",
    "session"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "fishrock123",
      "email": "fishrock123@rocketmail.com"
    },
    {
      "name": "jongleberry",
      "email": "jonathanrichardong@gmail.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "cookie-session",
  "optionalDependencies": {},
  "readme": "# cookie-session\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nSimple cookie-based session middleware.\n\nA user session can be stored in two main ways with cookies: on the server or on\nthe client. This module stores the session data on the client within a cookie,\nwhile a module like [express-session](https://www.npmjs.com/package/express-session)\nstores only a session identifier on the client within a cookie and stores the\nsession data on the server, typically in a database.\n\nThe following points can help you choose which to use:\n\n  * `cookie-session` does not require any database / resources on the server side,\n    though the total session data cannot exceed the browser's max cookie size.\n  * `cookie-session` can simplify certain load-balanced scenarios.\n  * `cookie-session` can be used to store a \"light\" session and include an identifier\n    to look up a database-backed secondary store to reduce database lookups.\n\n## Semantics\n\n  This module provides \"guest\" sessions, meaning any visitor will have a session,\n  authenticated or not. If a session is _new_ a `Set-Cookie` will be produced regardless\n  of populating the session.\n\n## Install\n\n```bash\n$ npm install cookie-session\n```\n\n## API\n\n```js\nvar cookieSession = require('cookie-session')\n```\n\n### cookieSession(options)\n\nCreate a new cookie session middleware with the provided options.\n\n#### Options\n\nCookie session accepts these properties in the options object.\n\n##### name\n\nThe name of the cookie to set, defaults to `express:sess`.\n\n##### keys\n\nThe list of keys to use to sign & verify cookie values. Set cookies are always\nsigned with `keys[0]`, while the other keys are valid for verification, allowing\nfor key rotation.\n\n##### secret\n\nA string which will be used as single key if `keys` is not provided.\n\n##### Cookie Options\n\nOther options are passed to `cookies.get()` and `cookies.set()` allowing you\nto control security, domain, path, and signing among other settings.\n\nThe options can also contain any of the following (for the full list, see\n[cookies module documentation](https://www.npmjs.org/package/cookies#readme):\n\n  - `maxAge`: a number representing the milliseconds from `Date.now()` for expiry\n  - `expires`: a `Date` object indicating the cookie's expiration date (expires at the end of session by default).\n  - `path`: a string indicating the path of the cookie (`/` by default).\n  - `domain`: a string indicating the domain of the cookie (no default).\n  - `secure`: a boolean indicating whether the cookie is only to be sent over HTTPS (`false` by default for HTTP, `true` by default for HTTPS).\n  - `secureProxy`: a boolean indicating whether the cookie is only to be sent over HTTPS (use this if you handle SSL not in your node process).\n  - `httpOnly`: a boolean indicating whether the cookie is only to be sent over HTTP(S), and not made available to client JavaScript (`true` by default).\n  - `signed`: a boolean indicating whether the cookie is to be signed (`true` by default).\n  - `overwrite`: a boolean indicating whether to overwrite previously set cookies of the same name (`true` by default).\n\n### req.session\n\nRepresents the session for the given request.\n\n#### .isNew\n\nIs `true` if the session is new.\n\n#### .populated\n\nDetermine if the session has been populated with data or is empty.\n\n### req.sessionOptions\n\nRepresents the session options for the current request. These options are a\nshallow clone of what was provided at middleware construction and can be\naltered to change cookie setting behavior on a per-request basis.\n\n### Destroying a session\n\n  To destroy a session simply set it to `null`:\n\n```js\nreq.session = null\n```\n\n## Example\n\n### Simple view counter example\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.set('trust proxy', 1) // trust first proxy\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\napp.use(function (req, res, next) {\n  // Update views\n  req.session.views = (req.session.views || 0) + 1\n\n  // Write response\n  res.end(req.session.views + ' views')\n})\n\napp.listen(3000)\n```\n\n## Per-user sticky max age\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.set('trust proxy', 1) // trust first proxy\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\n// This allows you to set req.session.maxAge to let certain sessions\n// have a different value than the default.\napp.use(function (req, res, next) {\n  req.sessionOptions.maxAge = req.session.maxAge || req.sessionOptions.maxAge\n})\n\n// ... your logic here ...\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-session.svg\n[npm-url]: https://npmjs.org/package/cookie-session\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-session/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-session\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-session.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-session?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-session.svg\n[downloads-url]: https://npmjs.org/package/cookie-session\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/cookie-session.git"
  },
  "scripts": {
    "test": "mocha --check-leaks --reporter spec --bail test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec test/"
  },
  "version": "1.4.0"
}
